targetmat=xsg_c3
targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0])
ncontrol=str_count(xsg_c[1,1],"/")+1
targetmatvec_log=log2(targetmatvec)
if(ncontrol>1 & nrow(targetmatvec_log)>1){
ctrlmean=rowMeans(targetmatvec_log[,1:ncontrol])
}else{
ctrlmean=targetmatvec_log[,1]
}
targetmatvec_log=targetmatvec_log-ctrlmean
colnames(targetmatvec_log)=collabel
p<-ggplot(melt(targetmatvec_log),aes(x=Var2,y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0,  space = "Lab", #limit = c(-1,1),
name="Log2 FC")+
theme_minimal()+
xlab('Samples')+
ylab('Guides')+
ggtitle(targetgene)+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))
print(p)
#return(targetmatvec_log)
}
plot_rra_or_p_scores<-function(gstable,startindex,fdrcolumn,target_list,...){
pvec=gstable[,startindex]
names(pvec)=gstable[,'id']
pvec=sort(pvec);
ncutoff=ifelse(fdrcutoff>0,sum(gstable[,fdrcolumn]<fdrcutoff),-1)
vcutoff=ifelse(fdrcutoff>0 & ncutoff>0,max(pvec[1:ncutoff]),-1)
plotrankedvalues(pvec,target_list,cutoffline = ncutoff,...)
plotrandvalues(pvec,target_list,cutoffline = vcutoff,...)
}
gene_summary_file=paste(comparison_name,'.gene_summary.txt',sep='')
sgrna_summary_file=paste(comparison_name,'.sgrna_summary.txt',sep='')
log_file=paste(comparison_name,'.log',sep='')
gstable=read.table(gene_summary_file,header = T,as.is = T,na.strings='')
sg_table=read.table(sgrna_summary_file,header = T,as.is = T,na.strings='')
comp_samples=getcomparisonsfromlogfile(log_file)
collabel=c(comp_samples[[1]],comp_samples[[2]])
sampletable=data.frame(Sample=c(comp_samples[[1]],comp_samples[[2]]),Type=c(rep('control',length(comp_samples[[1]])),rep('treatment',length(comp_samples[[2]]))))
kable(sampletable,caption='Sample summary')
cptable=genreporttable(comparison_name,gstable)
kable(cptable,caption='Comparion summary')
targetgenelist_neg=gstable[gstable[,6]<=5,1]
# or, directly specify the genes to be plotted
#targetgenelist_neg=c("ACTR8","ACIN1")
# display genes used in the plot
print(targetgenelist_neg)
startindex=3
fdrcolumn=5
plot_rra_or_p_scores(gstable,startindex,fdrcolumn,target_list = targetgenelist_neg, xlab='Genes',ylab='RRAscore',main=paste('Distribution of RRA scores in',comparison_name))
View(gstable)
startindex=4
fdrcolumn=5
plot_rra_or_p_scores(gstable,startindex,fdrcolumn,target_list = targetgenelist_neg, xlab='Genes',ylab='p value',main=paste('Distribution of p values in',comparison_name))
targetgenelist_pos=gstable[gstable[,12]<5,1]
# or, directly specify the genes to be plotted
#targetgenelist_pos=c("ACTR8","ACIN1")
# display genes used in the plot
print(targetgenelist_pos)
startindex=9
fdrcolumn=11
plot_rra_or_p_scores(gstable,startindex,fdrcolumn,target_list = targetgenelist_pos, xlab='Genes',ylab='RRAscore',main=paste('Distribution of RRA scores in',comparison_name))
startindex=10
fdrcolumn=11
plot_rra_or_p_scores(gstable,startindex,fdrcolumn,target_list = targetgenelist_pos, xlab='Genes',ylab='p value',main=paste('Distribution of p values in',comparison_name))
for(target_gene in c(targetgenelist_neg,targetgenelist_pos)){
plotindvidualsgrnas(sg_table,target_gene,collabel)
}
for(target_gene in c(targetgenelist_neg,targetgenelist_pos)){
plotindvidualsgrnas(sg_table,target_gene,collabel)
}
# define the comparison_name here; for example,
# comparison_name='demo'
comparison_name='demo'
fdrcutoff=0.05
# fdrcutoff=-1 # disable FDR cutoff line
####  function definition #
library(knitr)
library(stringr)
library(ggplot2)
library(reshape2)
library(fgsea)
genreporttable<-function(cpname,genetb){
comparisons=rep(cpname,2)
#genetb=read.table(genesummaryfile,header = T,as.is = T)
ngenes=rep(nrow(genetb),2)
direction=c('neg','pos')
fdr1=c(sum(genetb[,5]<0.01),sum(genetb[,11]<0.01))
fdr5=c(sum(genetb[,5]<0.05),sum(genetb[,11]<0.05))
fdr25=c(sum(genetb[,5]<0.05),sum(genetb[,11]<0.05))
xtb=data.frame(Comparison=comparisons,Genes=ngenes,Selection=direction,FDR1=fdr1,FDR5=fdr5,FDR25=fdr25);
colnames(xtb)=c("Comparison","Genes","Selection","FDR1%","FDR5%","FDR25%");
return (xtb);
}
colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
"#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3",
"#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
"#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")
plotrankedvalues<-function(val, tglist, cutoffline=-1, ...){
plot(val,log='y',ylim=c(max(val),min(val)),type='l',lwd=2, ...)
if(length(tglist)>0){
for(i in 1:length(tglist)){
targetgene=tglist[i];
tx=which(names(val)==targetgene);ty=val[targetgene];
points(tx,ty,col=colors[(i %% length(colors)) ],cex=2,pch=20)
# text(tx+50,ty,targetgene,col=colors[i])
}
legend('topright',tglist,pch=20,pt.cex = 2,cex=1,col=colors)
}
if(cutoffline>0){
lines(c(cutoffline,cutoffline),c(min(val)*1e-5,max(val)*10000),lty=2)
}
}
plotrandvalues<-function(val,targetgenelist,cutoffline=-1, ...){
# choose the one with the best distance distribution
mindiffvalue=0;
randval=val;
for(i in 1:20){
randval0=sample(val)
vindex=sort(which(names(randval0) %in% targetgenelist))
if(max(vindex)>0.9*length(val)){
# print('pass...')
next;
}
mindiffind=min(diff(vindex));
if (mindiffind > mindiffvalue){
mindiffvalue=mindiffind;
randval=randval0;
# print(paste('Diff: ',mindiffvalue))
}
}
plot(randval,log='y',ylim=c(max(randval),min(randval)),pch=20,col='grey', ...)
if(length(targetgenelist)>0){
for(i in 1:length(targetgenelist)){
targetgene=targetgenelist[i];
tx=which(names(randval)==targetgene);ty=randval[targetgene];
points(tx,ty,col=colors[(i %% length(colors)) ],cex=2,pch=20)
text(tx+length(randval)/100,ty,targetgene,col=colors[i],adj=1,pos=4)
}
}
if(cutoffline>0){
lines(c(-100,length(randval)*2),c(cutoffline,cutoffline),lty=2)
}
}
getcomparisonsfromlogfile<-function(logfile){
logline=readLines(file(logfile,"r"),n = 1)
#print(logline)
logbk=strsplit(logline,' ')[[1]]
ctrl_sample=c()
treat_sample=c()
for(i_x in 1:length(logbk)){
if(logbk[i_x]=='-c' | logbk[i_x]=='--control'){
ctrl_sample=strsplit(logbk[i_x+1],',')[[1]]
}
if(logbk[i_x]=='-t' | logbk[i_x]=='--treatment'){
treat_sample=strsplit(logbk[i_x+1],',')[[1]]
}
}
#close(logff)
return (list(ctrl_sample,treat_sample))
}
plotindvidualsgrnas<-function(sg_table,targetgene,collabel){
xsg_c=sg_table[which(sg_table[,'Gene']==targetgene),c('control_count','treatment_count')]
rownames(xsg_c)=sg_table[which(sg_table[,'Gene']==targetgene),'sgrna']
xsg_c2=paste(xsg_c[,1],xsg_c[,2],sep='/')
xsg_c3=t(data.frame(lapply(strsplit(xsg_c2,'/'),as.numeric)))
rownames(xsg_c3)=rownames(xsg_c)
targetmat=xsg_c3
targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:nrow(targetmat)){
vali=targetmat[i,]+1;
if(i==1){
plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
if(length(collabel)==length(vali)){
axis(1,at=1:length(vali),labels=(collabel),las=2)
}else{
warning('Cannot extract sample labels.')
}
# lines(0:100,rep(1,101),col='black');
}else{
lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
}
}
}
plotindvidualsgrnas_lfc<-function(sg_table,targetgene,collabel){
xsg_c=sg_table[which(sg_table[,'Gene']==targetgene),c('control_count','treatment_count')]
rownames(xsg_c)=sg_table[which(sg_table[,'Gene']==targetgene),'sgrna']
xsg_c2=paste(xsg_c[,1],xsg_c[,2],sep='/')
xsg_c3=t(data.frame(lapply(strsplit(xsg_c2,'/'),as.numeric)))
rownames(xsg_c3)=rownames(xsg_c)
targetmat=xsg_c3
targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0])
ncontrol=str_count(xsg_c[1,1],"/")+1
targetmatvec_log=log2(targetmatvec)
if(ncontrol>1 & nrow(targetmatvec_log)>1){
ctrlmean=rowMeans(targetmatvec_log[,1:ncontrol])
}else{
ctrlmean=targetmatvec_log[,1]
}
targetmatvec_log=targetmatvec_log-ctrlmean
colnames(targetmatvec_log)=collabel
p<-ggplot(melt(targetmatvec_log),aes(x=Var2,y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0,  space = "Lab", #limit = c(-1,1),
name="Log2 FC")+
theme_minimal()+
xlab('Samples')+
ylab('Guides')+
ggtitle(targetgene)+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))
print(p)
#return(targetmatvec_log)
}
plot_rra_or_p_scores<-function(gstable,startindex,fdrcolumn,target_list,...){
pvec=gstable[,startindex]
names(pvec)=gstable[,'id']
pvec=sort(pvec);
ncutoff=ifelse(fdrcutoff>0,sum(gstable[,fdrcolumn]<fdrcutoff),-1)
vcutoff=ifelse(fdrcutoff>0 & ncutoff>0,max(pvec[1:ncutoff]),-1)
plotrankedvalues(pvec,target_list,cutoffline = ncutoff,...)
plotrandvalues(pvec,target_list,cutoffline = vcutoff,...)
}
gene_summary_file=paste(comparison_name,'.gene_summary.txt',sep='')
sgrna_summary_file=paste(comparison_name,'.sgrna_summary.txt',sep='')
log_file=paste(comparison_name,'.log',sep='')
sampletable=data.frame(Sample=c(comp_samples[[1]],comp_samples[[2]]),Type=c(rep('control',length(comp_samples[[1]])),rep('treatment',length(comp_samples[[2]]))))
gene_summary_file=paste(comparison_name,'.gene_summary.txt',sep='')
sgrna_summary_file=paste(comparison_name,'.sgrna_summary.txt',sep='')
log_file=paste(comparison_name,'.log',sep='')
gstable=read.table(gene_summary_file,header = T,as.is = T,na.strings='')
sg_table=read.table(sgrna_summary_file,header = T,as.is = T,na.strings='')
comp_samples=getcomparisonsfromlogfile(log_file)
collabel=c(comp_samples[[1]],comp_samples[[2]])
sampletable=data.frame(Sample=c(comp_samples[[1]],comp_samples[[2]]),Type=c(rep('control',length(comp_samples[[1]])),rep('treatment',length(comp_samples[[2]]))))
kable(sampletable,caption='Sample summary')
cptable=genreporttable(comparison_name,gstable)
kable(cptable,caption='Comparion summary')
targetgenelist_neg=gstable[gstable[,6]<=5,1]
# or, directly specify the genes to be plotted
#targetgenelist_neg=c("ACTR8","ACIN1")
# display genes used in the plot
print(targetgenelist_neg)
startindex=3
fdrcolumn=5
plot_rra_or_p_scores(gstable,startindex,fdrcolumn,target_list = targetgenelist_neg, xlab='Genes',ylab='RRAscore',main=paste('Distribution of RRA scores in',comparison_name))
startindex=4
fdrcolumn=5
plot_rra_or_p_scores(gstable,startindex,fdrcolumn,target_list = targetgenelist_neg, xlab='Genes',ylab='p value',main=paste('Distribution of p values in',comparison_name))
targetgenelist_pos=gstable[gstable[,12]<5,1]
# or, directly specify the genes to be plotted
#targetgenelist_pos=c("ACTR8","ACIN1")
# display genes used in the plot
print(targetgenelist_pos)
startindex=9
fdrcolumn=11
plot_rra_or_p_scores(gstable,startindex,fdrcolumn,target_list = targetgenelist_pos, xlab='Genes',ylab='RRAscore',main=paste('Distribution of RRA scores in',comparison_name))
targetgenelist_pos=gstable[gstable[,12]<5,1]
# or, directly specify the genes to be plotted
#targetgenelist_pos=c("ACTR8","ACIN1")
# display genes used in the plot
print(targetgenelist_pos)
targetgenelist_pos=gstable[gstable[,12]<11,1]
# or, directly specify the genes to be plotted
#targetgenelist_pos=c("ACTR8","ACIN1")
# display genes used in the plot
print(targetgenelist_pos)
startindex=9
fdrcolumn=11
plot_rra_or_p_scores(gstable,startindex,fdrcolumn,target_list = targetgenelist_pos, xlab='Genes',ylab='RRAscore',main=paste('Distribution of RRA scores in',comparison_name))
View(gstable)
data <- gstable[,c(1,9,10)]
View(data)
data$pos.score <- (-log10(data$pos.score))
data$pos.p.value <- (-log10(data$pos.p.value))
data <- gstable[,c(1,9,10)]
data$pos.score <- (-log10(data$pos.score))
data=cbind(ID=row.names(data),data)
write.table(data,file="result.txt",sep="\t",row.names=F,col.names=T,quote=F)
?system.time
grp <- read.table("C:\\Users\\98706\\Desktop\\ccRCCsinglecell\\21.cancercell\\5.CNV\\ccRCC\\infercnv.observation_groupings.txt", sep=' ', header=T)
obs <- read.table("C:\\Users\\98706\\Desktop\\ccRCCsinglecell\\21.cancercell\\5.CNV\\ccRCC\\infercnv.observations.txt", header=T, check.names = F)
View(obs)
exp2 <- obs
expr2=expr-1
exp <- obs
expr2=exp-1
expr2=expr2 ^ 2
obs <- exp2
scores <- as.data.frame(colSums(obs))
scores$cluster <- grp$Annotation.Group
colnames(scores) <- c("score", "cluster")
ggplot(scores, aes(x=cluster,y=score, fill=factor(cluster)))+
geom_boxplot(outlier.shape = NA)+
scale_fill_manual(values=c("#8DD3C7", "#A9A0B2","#8DD3C7", "#A9A0B2","#8DD3C7", "#A9A0B2","#8DD3C7", "#A9A0B2", "#A9A0B2"))+
labs(fill = "Cluster")
library(ggplot2)
ggplot(scores, aes(x=cluster,y=score, fill=factor(cluster)))+
geom_boxplot(outlier.shape = NA)+
scale_fill_manual(values=c("#8DD3C7", "#A9A0B2","#8DD3C7", "#A9A0B2","#8DD3C7", "#A9A0B2","#8DD3C7", "#A9A0B2", "#A9A0B2"))+
labs(fill = "Cluster")
View(obs)
obs <- read.table("C:\\Users\\98706\\Desktop\\ccRCCsinglecell\\21.cancercell\\5.CNV\\ccRCC\\infercnv.observations.txt", header=T, check.names = F)
View(obs)
exp <- obs
expr2=exp-1
expr2=expr2 ^ 2
obs <- exp2
View(obs)
View(expr2)
exp <- obs
expr2=exp-1
expr2=expr2 ^ 2
obs <- expr2
scores <- as.data.frame(colSums(obs))
scores$cluster <- grp$Annotation.Group
colnames(scores) <- c("score", "cluster")
ggplot(scores, aes(x=cluster,y=score, fill=factor(cluster)))+
geom_boxplot(outlier.shape = NA)+
scale_fill_manual(values=c("#8DD3C7", "#A9A0B2","#8DD3C7", "#A9A0B2","#8DD3C7", "#A9A0B2","#8DD3C7", "#A9A0B2", "#A9A0B2"))+
labs(fill = "Cluster")
View(obs)
View(scores)
View(scores)
scores <- as.data.frame(colSums(obs))
obs <- read.table("C:\\Users\\98706\\Desktop\\ccRCCsinglecell\\21.cancercell\\5.CNV\\ccRCC\\infercnv.observations.txt", header=T, check.names = F)
exp <- obs
expr2=exp-1
expr2=expr2 ^ 2
obs <- expr2
scores <- as.data.frame(colMeans(obs))
scores$cluster <- grp$Annotation.Group
colnames(scores) <- c("score", "cluster")
ggplot(scores, aes(x=cluster,y=score, fill=factor(cluster)))+
geom_boxplot(outlier.shape = NA)+
scale_fill_manual(values=c("#8DD3C7", "#A9A0B2","#8DD3C7", "#A9A0B2","#8DD3C7", "#A9A0B2","#8DD3C7", "#A9A0B2", "#A9A0B2"))+
labs(fill = "Cluster")
sample_color <- col_vector[1:40]
library(Seurat)
library(tidyverse)
library(dplyr)
library(patchwork)
library(RColorBrewer)
sample_color <- col_vector[1:40]
library(reshape2)
sample_color <- col_vector[1:40]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
ggplot(scores, aes(x=cluster,y=score, fill=factor(cluster)))+
geom_boxplot(outlier.shape = NA)+
scale_fill_manual(values=col_vector)+
labs(fill = "Cluster")
devtools::install_github("TheHumphreysLab/plot1cell")
BiocManager::install('DoubletFinder')
install.packages('DoubletFinder')
bioc.packages <- c("biomaRt","GenomeInfoDb","EnsDb.Hsapiens.v86","GEOquery","simplifyEnrichment","ComplexHeatmap")
BiocManager::install(bioc.packages)
dev.packages <- c("chris-mcginnis-ucsf/DoubletFinder","Novartis/hdf5r","mojaveazure/loomR")
devtools::install_github(dev.packages)
BiocManager::install("simplifyEnrichment")
devtools::install_github("TheHumphreysLab/plot1cell")
BiocManager::install(version='devel')
BiocManager::install(version = '3.16')
BiocManager::install("simplifyEnrichment")
devtools::install_github("TheHumphreysLab/plot1cell")
library(plot1cell)
library(tidyverse)
library(Seurat)
sessionInfo()
library(ConsensusClusterPlus)
sessionInfo()
Seurat <- readRDS("C:/Users/98706/Desktop/ccRCCsinglecell/Seurat.RDS")
Seurat <- Seurat[,Seurat$cell_type %in% c("Macrophage")]
DotPlot(Seurat, features = c("CSF1R","MRC1","ARG1","CD163","PDCD1LG2")) + RotatedAxis()
library(Seurat)
DotPlot(Seurat, features = c("CSF1R","MRC1","ARG1","CD163","PDCD1LG2")) + RotatedAxis()
Idents(Seurat)<- Seurat$cell_cluster_type
DotPlot(Seurat, features = c("CSF1R","MRC1","ARG1","CD163","PDCD1LG2")) + RotatedAxis()
DotPlot(Seurat, features = c("CSF1R","MRC1","CD163","CD274","PDCD1LG2")) + RotatedAxis()
DotPlot(Seurat, features = c("CSF1R","MRC1","CD163","CD274","PDCD1LG2","CLEC10A","CLEC7A","RETNLB")) + RotatedAxis()
#引用包
library(reshape2)
library(ggpubr)
?stat_compare_means
library(Seurat)
?findmarker
?FindAllMarkers
BiocManager::install("maftools")
##monocle3
library(limma)
library(Seurat)
library(dplyr)
library(magrittr)
library(celldex)
library(SingleR)
library(monocle3)
library(ggplot2)
cds <- readRDS("C:/Users/98706/Desktop/ccRCCsinglecell/23.Tcell/new/27.trajectory2/cds.RDS")
Track_genes <- graph_test(cds,neighbor_graph="principal_graph", cores=6)
p2 <- plot_cells(cds, reduction_method="UMAP", color_cells_by="cell_cluster_type2", graph_label_size=3) + ggtitle('cds.umap')
p2
Track_genes <-Track_genes[,c(1,2,3,4)] %>% filter(q_value < 1e-3) ##需要定义轨迹
rlang::last_error()
View(Track_genes)
View(Track_genes)
View(Track_genes)
Track_genes <-Track_genes[,c(5,2,3,4,1,6)] %>% filter(q_value < 1e-3)
write.csv(Track_genes,"Trajectory_genes.csv", row.names = F)
Track_genes_sig <- Track_genes %>%top_n(n=10, morans_I) %>% pull(gene_short_name) %>% as.character() #top10
plot_genes_in_pseudotime(cds[Track_genes_sig,],color_cells_by="seurat_clusters",min_expr=0.5, ncol= 2)
plot_genes_in_pseudotime(cds[Track_genes_sig,],color_cells_by="cell_cluster_type2",min_expr=0.5, ncol= 2)
library(infercnv)
install.packages("Basic4Cseq")
BiocManager::install("Basic4Cseq")
library("Basic4Cseq")
library(Basic4Cseq)
data(liverData)
View(liverData)
fragments<-chooseNearCisFragments(liverData, regionCoordinates = c(20800000, 21000000))
head(fragments)
library(BSgenome.Ecoli.NCBI.20080805)
View(liverData)
if(interactive()) {
library(BSgenome.Ecoli.NCBI.20080805)
fragmentData = createVirtualFragmentLibrary(chosenGenome = Ecoli$NC_002655, firstCutter = "catg", secondCutter }
if(interactive()) {
library(BSgenome.Ecoli.NCBI.20080805)
fragmentData = createVirtualFragmentLibrary(chosenGenome = Ecoli$NC_002655, firstCutter = "catg", secondCutter = "tacg" }
if(interactive()) {
library(BSgenome.Ecoli.NCBI.20080805)
fragmentData = createVirtualFragmentLibrary(chosenGenome = Ecoli$NC_002655, firstCutter = "catg", secondCutter = "tacg") }
data <- createVirtualFragmentLibrary(chosenGenome = Ecoli$NC_002655,firstCutter = "catg", secondCutter = "gatc", readLength, onlyNonBlind = TRUE)
library(DNAString)
install.packages("DNAString")
BiocManager::install("DNAString")
if(interactive()) {
file <- system.file("extdata", "fetalLiverCutter.sam", package="Basic4Cseq")
checkRestrictionEnzymeSequence("aagctt", file)
}
data(liverData)
fragments<-chooseNearCisFragments(liverData, regionCoordinates = c(20800000, 21000000))
head(fragments)
if(interactive()) {
library(BSgenome.Ecoli.NCBI.20080805)
fragmentData = createVirtualFragmentLibrary(chosenGenome = Ecoli$NC_002655, firstCutter = "catg", secondCutter }
if(interactive()) {
library(BSgenome.Ecoli.NCBI.20080805)
fragmentData = createVirtualFragmentLibrary(chosenGenome = Ecoli$NC_002655, firstCutter = "catg", secondCutter= "actg") }
?DNAString
Seurat <- readRDS("C:/Users/98706/Desktop/ccRCCsinglecell/Seurat.RDS")
library(Seurat)
a <- Seurat$type
b <- Seurat$immune
c <- a+b
a <- as.character(a)
c <- a+b
for (i in c(1:length(a))) { c[i] <- paste0(a[i],b[i])
}
c[1:10]
a[1:10]
table(Seurat$patient  ,c)
ex <- table(Seurat$patient  ,c)
write.table(ex, file= "table")
write.table(ex, file= "table",sep="\t")
library(readxl)
COMM02_Comm_network <- read_excel("C:/Users/98706/Desktop/ccRCCsinglecell/20.zong/6.chellchat/COMM02.Comm.network.xls")
新建文本文档 <- read.delim("C:/Users/98706/Desktop/ccRCCsinglecell/20.zong/6.chellchat/新建文本文档.txt")
View(新建文本文档)
a <- 新建文本文档
b <- a(1:2,)
b <- a[1:2,]
View(b)
b <- a[,1:2]
c1 <- table(b$source)
c1
c2 <- table(b$target)
c2
c <- cbind(c1,c2)
c
write.table(c,file="count",sep = "/")
write.table(c,file="count",sep = " /")
write.table(c,file="count.txt",sep = " /")
write.table(c,file="count.txt",sep = "\t")
library(devtools)
library(roxygen2)
setwd("C:/Users/98706/Desktop/rpackage/ccRCCcluster")
devtools::load_all()
usethis::use_mit_license()
devtools::check()
roxygen2::roxygenize()
devtools::document()
document()
use_readme_rmd()
build_readme()
build()
build()
library(devtools)
library(roxygen2)
build()
remove.packages("ccRCC")
remove.packages("ccRCCcluster")
library("ccRCCcluster")
cluster <- predictcluster(test)
